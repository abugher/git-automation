#!/bin/bash

function fail {
  echo "Failure code:  (${1})" >&2
  exit 1
}


PATH="$HOME/code/github/abugher/git-automation:${PATH}"

test_dir="/tmp/git-automation_tests"
master_super_repo="${test_dir}/master_super"
master_sub_repo="${test_dir}/master_sub"
master_single_repo="${test_dir}/master_single"
main_super_repo="${test_dir}/super"
main_sub_repo="${test_dir}/sub"
main_single_repo="${test_dir}/single"
sub_repo_name='sub'
sub_sub_repo="${main_super_repo}/${sub_repo_name}"
old_cwd="${PWD}"

test_count=0
failure_count=0
success_count=0

function initialize_repo() {
  master=$1
  main=$2

  mkdir "${master}"                                             || fail 51
  cd "${master}"                                                || fail 52
  git init --bare                                               || fail 53

  git clone "${master}" "${main}"                               || fail 54
  cd "${main}"                                                  || fail 55
  touch thing0                                                  || fail 56
  git add thing0                                                || fail 57
  git commit -m 'No comment.'                                   || fail 58
  git push                                                      || fail 59
}

refresh_test_dir() {
  oldpwd=$PWD
  rm -rf "${test_dir}"                                          || fail 0
  mkdir "${test_dir}"                                           || fail 1
  cd "${test_dir}"                                              || fail 2

  initialize_repo "${master_single_repo}" "${main_single_repo}" || fail 10
  initialize_repo "${master_super_repo}" "${main_super_repo}"   || fail 11
  initialize_repo "${master_sub_repo}" "${main_sub_repo}"       || fail 12

  cd "${main_super_repo}"                                       || fail 3
  git submodule add "${master_sub_repo}" "${sub_repo_name}"     || fail 4
  git add "${sub_sub_repo}"                                     || fail 5
  git submodule update --init                                   || fail 6
  cd $oldpwd
}


for t in api_tests.d/*; do
  if test 'api_tests.d/*' == "${t}"; then
    continue
  fi
  echo "${t}"
  let test_count++
  lineno=0
  sc=0
  fc=0
  tc=0
  refresh_test_dir >/dev/null 2>&1
  while read command; do
    let lineno++
    oldpwd=$PWD
    cd "${test_dir}"                                            || fail 22
    let tc++
    if eval "${command}" >/dev/null 2>&1; then
      #echo "Pass:  ${test_count}"
      let sc++
    else
      echo "Fail:  ${lineno}"
      let fc++
    fi
    cd $oldpwd                                                  || fail 23
  done < "${t}"
  if test '0' == "${fc}"; then
    let success_count++
  else
    let failure_count++
  fi
  echo "Success:  ${sc}/${tc}"
  echo "Failures: ${fc}/${tc}"
done

echo "total"
echo "Success:  ${success_count}/${test_count}"
echo "Failures: ${failure_count}/${test_count}"
